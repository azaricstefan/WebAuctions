@using PagedList.Mvc;
@model PagedList.IPagedList<IEP___projekat_AS.Models.Auction>

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />


<div class="row">

    @*zbog centriranja*@
    <div class="col-md-1"></div>
    @{  var i = 0;
        foreach (var item in Model)
        {
            if (i == 5)
            {
                //break;
                <div class="col-md-1"></div> @*=> one for end of row and other for new row*@
                <div class="row"></div>
                <div class="col-md-1"></div>
                i = 0;
            }
            i++;
            <div class="col-md-2" style="text-align:center">
                @Html.ActionLink(item.name, "Details", new { id = item.Id })
                <img src="@Html.DisplayFor(modelItem => item.img)" width="100%" height="100%" alt="Picture of subject" /> <br />
                @{
                    //Do the conversion
                    var seconds = item.length;
                    TimeSpan time = TimeSpan.FromSeconds(seconds);
                    string stringTime = time.ToString(@"hh\:mm\:ss");
                }
                <label id="@item.Id-vreme">@stringTime</label> <br />



                Length: @Html.DisplayFor(modelItem => item.length)<br />
                Start offer: @Html.DisplayFor(modelItem => item.start_offer)<br />
                Current offer: @Html.DisplayFor(modelItem => item.price)<br />
                Ime bid-era<br />
                <p id="@item.Id-auctionStatus">Status: @Html.DisplayFor(modelItem => item.status)</p><br />
                <input id="@item.Id-bid" type="button"
                       class="btn btn-default form-control" value="BID"
                       onclick="sendBid(@item.Id);" />
            </div>
                    }
    }
    <div class="col-md-1"></div>

</div>
<br />
<hr />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
@Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))

@*================TEST AREA===============*@
<input type="text" id="message" />
<input type="button" id="sendmessage" value="Send" />
<input type="hidden" id="displayname" />
<ul id="discussion"></ul>
@*================TEST AREA===============*@


@*==========================SKRIPTE===============================*@
<script>
    $(function () {
        // Reference the auto-generated proxy for the hub.
        var chat = $.connection.chatHub;

        // Create a function that the hub can call back to display messages.
        chat.client.addNewMessageToPage = function (name, message) {
            //POZIVA SE ZA UPDATE NAKON KLIKA
            //UPDATE O BIDOVANJU
            if (name == "EXPIRED") expired(message);
            if (name == "SOLD") sold(message);
            if (name == "OPEN") openAuction(message);
            if (name == "BID") bidShow(message);

            $('#' + message + '-auctionStatus').text('OPEN');
            $('#' + message + '-vreme').text('01:23:45');
        };

        // Get the user name and store it to prepend to messages.
        $('#displayname').val('@User.Identity.Name');
        // Set initial focus to message input box.
        $('#message').focus();
        // Start the connection.
        $.connection.hub.start().done(function () {
            $('#sendmessage').click(function () {
                // Call the Send method on the hub.
                chat.server.send($('#displayname').val(), $('#message').val());
                // Clear text box and reset focus for next comment.
                $('#message').val('').focus();
            });
        });
    });
    // This optional function html-encodes messages for display in the page.
    function htmlEncode(value) {
        var encodedValue = $('<div />').text(value).html();
        return encodedValue;
    }



    function sendBid(id) {
        var chat = $.connection.chatHub;
        chat.server.send($('#displayname').val(), id);
    }

    setInterval(function () {
        $("label[id$='-vreme']").each(function (index) {

            var id = $(this).attr("id");

            id = id.substring(0, id.length);

            var time = $(this).text();

            var seconds = time.slice(6, 8);
            var minutes = time.slice(3, 5);
            var hours = time.slice(0, 2);

            if (hours == "00" && minutes == "00" && seconds == "00") {
                return;
            }

            var d = new Date(((parseInt(hours, 10) - 1) * 3600 + parseInt(minutes, 10) * 60 + parseInt(seconds, 10) - 1) * 1000);

            hours = d.getHours();
            minutes = d.getMinutes();
            seconds = d.getSeconds();

            if (hours < 10)
                hours = "0" + hours;

            if (minutes < 10)
                minutes = "0" + minutes;

            if (seconds < 10)
                seconds = "0" + seconds;

            $(this).text(hours + ":" + minutes + ":" + seconds)
            })
        }, 1000);
</script>
